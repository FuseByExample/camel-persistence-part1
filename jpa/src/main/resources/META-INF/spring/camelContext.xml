<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2011 FuseSource
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd
    ">

    <bean id="jpa" class="org.apache.camel.component.jpa.JpaComponent"/>
    <bean id="processIncident" class="com.fusesource.examples.persistence.part1.camel.ProcessIncidents"/>

    <bean id="txErrorHandler" class="org.apache.camel.spring.spi.TransactionErrorHandlerBuilder">
        <property name="redeliveryPolicy" ref="redeliveryPolicy"/>
    </bean>

    <bean id="redeliveryPolicy" class="org.apache.camel.processor.RedeliveryPolicy">
        <property name="maximumRedeliveries" value="2"/>
    </bean>

    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">

        <dataFormats>
            <bindy type="Csv" classType="com.fusesource.examples.persistence.part1.model.Incident" id="csvReport"/>
        </dataFormats>

        <!-- Route which will poll the DB and so perform select query -->
        <route id="trigger-database">
            <from uri="jpa://com.fusesource.examples.persistence.part1.model.Incident?consumeDelete=false&amp;consumer.delay=10000"/>
            <log message=">>> Result : ${body}"/>
        </route>

        <!-- Route which will poll the DB and so perform select query using here a namedQuery -->
        <route id="trigger-database-named-query">
            <from uri="jpa://com.fusesource.examples.persistence.part1.model.Incident?consumeDelete=false&amp;consumer.delay=20000&amp;consumer.initialDelay=10000&amp;consumer.namedQuery=reportSummaryQuery"/>
            <!-- JPA does not return an Incident but an Object[] -->
            <split>
                <simple>${body}</simple>
                <log message=">>> Result with named query : ${body}"/>
            </split>
        </route>

        <!-- Route which will insert a record in the DB. Info about the
        incident to be created is defined in a CSV file, extract and
        map to an Incident class using camel-bindy -->
        <route id="create-incident">
            <from uri="file://target/datainsert?moveFailed=failed"/>
            <unmarshal ref="csvReport"/>
            <split>
                <simple>${body}</simple>
                <bean ref="processIncident" method="extract"/>
                <to uri="jpa://Incident"/>
                <log message=">>> Record inserted : ${body}"/>
            </split>
        </route>

        <!-- This route generates an error to rollback the record from the DB. The file
        is not deleted but moved in the failed directory and Camel redelivers 2 times the
        exchange by calling the last processor where the error occurs -->
        <route id="rollback-incident" errorHandlerRef="txErrorHandler">
            <from uri="file://target/datainsertrollback?moveFailed=failed"/>
            <transacted/>
            <unmarshal ref="csvReport"/>
            <split>
                <simple>${body}</simple>
                <bean ref="processIncident"/>
                <to uri="jpa://Incident"/>
                <bean ref="processIncident" method="generateError"/>
                <log message=">>> Record not inserted : ${body}"/>
            </split>
        </route>

    </camelContext>

</beans>
